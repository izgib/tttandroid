//Generated by flatc compiler (version 1.11.0)
//If you make any local changes, they will be lost
//source: schema_android.fbs

package com.example.game.networking.i9e;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;

import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 *
 */
@javax.annotation.Generated(
        value = "by gRPC proto compiler",
        comments = "Source: schema_android.fbs")
public final class GameConfiguratorGrpc {

    private GameConfiguratorGrpc() {
    }

    public static final String SERVICE_NAME = "i9e.GameConfigurator";

    // Static method descriptors that strictly reflect the proto.
    @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
    @java.lang.Deprecated // Use {@link #getGetListOfGamesMethod()} instead.
    public static final io.grpc.MethodDescriptor<GameFilter,
            ListItem> METHOD_GET_LIST_OF_GAMES = getGetListOfGamesMethod();

    private static volatile io.grpc.MethodDescriptor<GameFilter,
            ListItem> getGetListOfGamesMethod;

    private static volatile FlatbuffersUtils.FBExtactor<GameFilter> extractorOfGameFilter;

    private static FlatbuffersUtils.FBExtactor<GameFilter> getExtractorOfGameFilter() {
        if (extractorOfGameFilter != null) return extractorOfGameFilter;
        synchronized (GameConfiguratorGrpc.class) {
            if (extractorOfGameFilter != null) return extractorOfGameFilter;
            extractorOfGameFilter = new FlatbuffersUtils.FBExtactor<GameFilter>() {
                public GameFilter extract(ByteBuffer buffer) {
                    return GameFilter.getRootAsGameFilter(buffer);
                }
            };
            return extractorOfGameFilter;
        }
    }

    private static volatile FlatbuffersUtils.FBExtactor<ListItem> extractorOfListItem;

    private static FlatbuffersUtils.FBExtactor<ListItem> getExtractorOfListItem() {
        if (extractorOfListItem != null) return extractorOfListItem;
        synchronized (GameConfiguratorGrpc.class) {
            if (extractorOfListItem != null) return extractorOfListItem;
            extractorOfListItem = new FlatbuffersUtils.FBExtactor<ListItem>() {
                public ListItem extract(ByteBuffer buffer) {
                    return ListItem.getRootAsListItem(buffer);
                }
            };
            return extractorOfListItem;
        }
    }

    @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
    public static io.grpc.MethodDescriptor<GameFilter,
            ListItem> getGetListOfGamesMethod() {
        io.grpc.MethodDescriptor<GameFilter, ListItem> getGetListOfGamesMethod;
        if ((getGetListOfGamesMethod = GameConfiguratorGrpc.getGetListOfGamesMethod) == null) {
            synchronized (GameConfiguratorGrpc.class) {
                if ((getGetListOfGamesMethod = GameConfiguratorGrpc.getGetListOfGamesMethod) == null) {
                    GameConfiguratorGrpc.getGetListOfGamesMethod = getGetListOfGamesMethod =
                            io.grpc.MethodDescriptor.<GameFilter, ListItem>newBuilder()
                                    .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
                                    .setFullMethodName(generateFullMethodName(
                                            "i9e.GameConfigurator", "GetListOfGames"))
                                    .setSampledToLocalTracing(true)
                                    .setRequestMarshaller(FlatbuffersUtils.marshaller(
                                            GameFilter.class, getExtractorOfGameFilter()))
                                    .setResponseMarshaller(FlatbuffersUtils.marshaller(
                                            ListItem.class, getExtractorOfListItem()))
                                    .setSchemaDescriptor(null)
                                    .build();
                }
            }
        }
        return getGetListOfGamesMethod;
    }

    @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
    @java.lang.Deprecated // Use {@link #getCreateGameMethod()} instead.
    public static final io.grpc.MethodDescriptor<CrRequest,
            CrResponse> METHOD_CREATE_GAME = getCreateGameMethod();

    private static volatile io.grpc.MethodDescriptor<CrRequest,
            CrResponse> getCreateGameMethod;

    private static volatile FlatbuffersUtils.FBExtactor<CrRequest> extractorOfCrRequest;

    private static FlatbuffersUtils.FBExtactor<CrRequest> getExtractorOfCrRequest() {
        if (extractorOfCrRequest != null) return extractorOfCrRequest;
        synchronized (GameConfiguratorGrpc.class) {
            if (extractorOfCrRequest != null) return extractorOfCrRequest;
            extractorOfCrRequest = new FlatbuffersUtils.FBExtactor<CrRequest>() {
                public CrRequest extract(ByteBuffer buffer) {
                    return CrRequest.getRootAsCrRequest(buffer);
                }
            };
            return extractorOfCrRequest;
        }
    }

    private static volatile FlatbuffersUtils.FBExtactor<CrResponse> extractorOfCrResponse;

    private static FlatbuffersUtils.FBExtactor<CrResponse> getExtractorOfCrResponse() {
        if (extractorOfCrResponse != null) return extractorOfCrResponse;
        synchronized (GameConfiguratorGrpc.class) {
            if (extractorOfCrResponse != null) return extractorOfCrResponse;
            extractorOfCrResponse = new FlatbuffersUtils.FBExtactor<CrResponse>() {
                public CrResponse extract(ByteBuffer buffer) {
                    return CrResponse.getRootAsCrResponse(buffer);
                }
            };
            return extractorOfCrResponse;
        }
    }

    @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
    public static io.grpc.MethodDescriptor<CrRequest,
            CrResponse> getCreateGameMethod() {
        io.grpc.MethodDescriptor<CrRequest, CrResponse> getCreateGameMethod;
        if ((getCreateGameMethod = GameConfiguratorGrpc.getCreateGameMethod) == null) {
            synchronized (GameConfiguratorGrpc.class) {
                if ((getCreateGameMethod = GameConfiguratorGrpc.getCreateGameMethod) == null) {
                    GameConfiguratorGrpc.getCreateGameMethod = getCreateGameMethod =
                            io.grpc.MethodDescriptor.<CrRequest, CrResponse>newBuilder()
                                    .setType(io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
                                    .setFullMethodName(generateFullMethodName(
                                            "i9e.GameConfigurator", "CreateGame"))
                                    .setSampledToLocalTracing(true)
                                    .setRequestMarshaller(FlatbuffersUtils.marshaller(
                                            CrRequest.class, getExtractorOfCrRequest()))
                                    .setResponseMarshaller(FlatbuffersUtils.marshaller(
                                            CrResponse.class, getExtractorOfCrResponse()))
                                    .setSchemaDescriptor(null)
                                    .build();
                }
            }
        }
        return getCreateGameMethod;
    }

    @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
    @java.lang.Deprecated // Use {@link #getJoinGameMethod()} instead.
    public static final io.grpc.MethodDescriptor<OppRequest,
            OppResponse> METHOD_JOIN_GAME = getJoinGameMethod();

    private static volatile io.grpc.MethodDescriptor<OppRequest,
            OppResponse> getJoinGameMethod;

    private static volatile FlatbuffersUtils.FBExtactor<OppRequest> extractorOfOppRequest;

    private static FlatbuffersUtils.FBExtactor<OppRequest> getExtractorOfOppRequest() {
        if (extractorOfOppRequest != null) return extractorOfOppRequest;
        synchronized (GameConfiguratorGrpc.class) {
            if (extractorOfOppRequest != null) return extractorOfOppRequest;
            extractorOfOppRequest = new FlatbuffersUtils.FBExtactor<OppRequest>() {
                public OppRequest extract(ByteBuffer buffer) {
                    return OppRequest.getRootAsOppRequest(buffer);
                }
            };
            return extractorOfOppRequest;
        }
    }

    private static volatile FlatbuffersUtils.FBExtactor<OppResponse> extractorOfOppResponse;

    private static FlatbuffersUtils.FBExtactor<OppResponse> getExtractorOfOppResponse() {
        if (extractorOfOppResponse != null) return extractorOfOppResponse;
        synchronized (GameConfiguratorGrpc.class) {
            if (extractorOfOppResponse != null) return extractorOfOppResponse;
            extractorOfOppResponse = new FlatbuffersUtils.FBExtactor<OppResponse>() {
                public OppResponse extract(ByteBuffer buffer) {
                    return OppResponse.getRootAsOppResponse(buffer);
                }
            };
            return extractorOfOppResponse;
        }
    }

    @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
    public static io.grpc.MethodDescriptor<OppRequest,
            OppResponse> getJoinGameMethod() {
        io.grpc.MethodDescriptor<OppRequest, OppResponse> getJoinGameMethod;
        if ((getJoinGameMethod = GameConfiguratorGrpc.getJoinGameMethod) == null) {
            synchronized (GameConfiguratorGrpc.class) {
                if ((getJoinGameMethod = GameConfiguratorGrpc.getJoinGameMethod) == null) {
                    GameConfiguratorGrpc.getJoinGameMethod = getJoinGameMethod =
                            io.grpc.MethodDescriptor.<OppRequest, OppResponse>newBuilder()
                                    .setType(io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
                                    .setFullMethodName(generateFullMethodName(
                                            "i9e.GameConfigurator", "JoinGame"))
                                    .setSampledToLocalTracing(true)
                                    .setRequestMarshaller(FlatbuffersUtils.marshaller(
                                            OppRequest.class, getExtractorOfOppRequest()))
                                    .setResponseMarshaller(FlatbuffersUtils.marshaller(
                                            OppResponse.class, getExtractorOfOppResponse()))
                                    .setSchemaDescriptor(null)
                                    .build();
                }
            }
        }
        return getJoinGameMethod;
    }

    /**
     * Creates a new async stub that supports all call types for the service
     */
    public static GameConfiguratorStub newStub(io.grpc.Channel channel) {
        return new GameConfiguratorStub(channel);
    }

    /**
     * Creates a new blocking-style stub that supports unary and streaming output calls on the service
     */
    public static GameConfiguratorBlockingStub newBlockingStub(
            io.grpc.Channel channel) {
        return new GameConfiguratorBlockingStub(channel);
    }

    /**
     * Creates a new ListenableFuture-style stub that supports unary calls on the service
     */
    public static GameConfiguratorFutureStub newFutureStub(
            io.grpc.Channel channel) {
        return new GameConfiguratorFutureStub(channel);
    }

    /**
     *
     */
    public static abstract class GameConfiguratorImplBase implements io.grpc.BindableService {

        /**
         *
         */
        public void getListOfGames(GameFilter request,
                                   io.grpc.stub.StreamObserver<ListItem> responseObserver) {
            asyncUnimplementedUnaryCall(getGetListOfGamesMethod(), responseObserver);
        }

        /**
         *
         */
        public io.grpc.stub.StreamObserver<CrRequest> createGame(
                io.grpc.stub.StreamObserver<CrResponse> responseObserver) {
            return asyncUnimplementedStreamingCall(getCreateGameMethod(), responseObserver);
        }

        /**
         *
         */
        public io.grpc.stub.StreamObserver<OppRequest> joinGame(
                io.grpc.stub.StreamObserver<OppResponse> responseObserver) {
            return asyncUnimplementedStreamingCall(getJoinGameMethod(), responseObserver);
        }

        @java.lang.Override
        public final io.grpc.ServerServiceDefinition bindService() {
            return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
                    .addMethod(
                            getGetListOfGamesMethod(),
                            asyncServerStreamingCall(
                                    new MethodHandlers<
                                            GameFilter,
                                            ListItem>(
                                            this, METHODID_GET_LIST_OF_GAMES)))
                    .addMethod(
                            getCreateGameMethod(),
                            asyncBidiStreamingCall(
                                    new MethodHandlers<
                                            CrRequest,
                                            CrResponse>(
                                            this, METHODID_CREATE_GAME)))
                    .addMethod(
                            getJoinGameMethod(),
                            asyncBidiStreamingCall(
                                    new MethodHandlers<
                                            OppRequest,
                                            OppResponse>(
                                            this, METHODID_JOIN_GAME)))
                    .build();
        }
    }

    /**
     *
     */
    public static final class GameConfiguratorStub extends io.grpc.stub.AbstractStub<GameConfiguratorStub> {
        private GameConfiguratorStub(io.grpc.Channel channel) {
            super(channel);
        }

        private GameConfiguratorStub(io.grpc.Channel channel,
                                     io.grpc.CallOptions callOptions) {
            super(channel, callOptions);
        }

        @java.lang.Override
        protected GameConfiguratorStub build(io.grpc.Channel channel,
                                             io.grpc.CallOptions callOptions) {
            return new GameConfiguratorStub(channel, callOptions);
        }

        /**
         *
         */
        public void getListOfGames(GameFilter request,
                                   io.grpc.stub.StreamObserver<ListItem> responseObserver) {
            asyncServerStreamingCall(
                    getChannel().newCall(getGetListOfGamesMethod(), getCallOptions()), request, responseObserver);
        }

        /**
         *
         */
        public io.grpc.stub.StreamObserver<CrRequest> createGame(
                io.grpc.stub.StreamObserver<CrResponse> responseObserver) {
            return asyncBidiStreamingCall(
                    getChannel().newCall(getCreateGameMethod(), getCallOptions()), responseObserver);
        }

        /**
         *
         */
        public io.grpc.stub.StreamObserver<OppRequest> joinGame(
                io.grpc.stub.StreamObserver<OppResponse> responseObserver) {
            return asyncBidiStreamingCall(
                    getChannel().newCall(getJoinGameMethod(), getCallOptions()), responseObserver);
        }
    }

    /**
     *
     */
    public static final class GameConfiguratorBlockingStub extends io.grpc.stub.AbstractStub<GameConfiguratorBlockingStub> {
        private GameConfiguratorBlockingStub(io.grpc.Channel channel) {
            super(channel);
        }

        private GameConfiguratorBlockingStub(io.grpc.Channel channel,
                                             io.grpc.CallOptions callOptions) {
            super(channel, callOptions);
        }

        @java.lang.Override
        protected GameConfiguratorBlockingStub build(io.grpc.Channel channel,
                                                     io.grpc.CallOptions callOptions) {
            return new GameConfiguratorBlockingStub(channel, callOptions);
        }

        /**
         *
         */
        public java.util.Iterator<ListItem> getListOfGames(
                GameFilter request) {
            return blockingServerStreamingCall(
                    getChannel(), getGetListOfGamesMethod(), getCallOptions(), request);
        }
    }

    /**
     *
     */
    public static final class GameConfiguratorFutureStub extends io.grpc.stub.AbstractStub<GameConfiguratorFutureStub> {
        private GameConfiguratorFutureStub(io.grpc.Channel channel) {
            super(channel);
        }

        private GameConfiguratorFutureStub(io.grpc.Channel channel,
                                           io.grpc.CallOptions callOptions) {
            super(channel, callOptions);
        }

        @java.lang.Override
        protected GameConfiguratorFutureStub build(io.grpc.Channel channel,
                                                   io.grpc.CallOptions callOptions) {
            return new GameConfiguratorFutureStub(channel, callOptions);
        }
    }

    private static final int METHODID_GET_LIST_OF_GAMES = 0;
    private static final int METHODID_CREATE_GAME = 1;
    private static final int METHODID_JOIN_GAME = 2;

    private static final class MethodHandlers<Req, Resp> implements
            io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
            io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
            io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
            io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
        private final GameConfiguratorImplBase serviceImpl;
        private final int methodId;

        MethodHandlers(GameConfiguratorImplBase serviceImpl, int methodId) {
            this.serviceImpl = serviceImpl;
            this.methodId = methodId;
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("unchecked")
        public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
            switch (methodId) {
                case METHODID_GET_LIST_OF_GAMES:
                    serviceImpl.getListOfGames((GameFilter) request,
                            (io.grpc.stub.StreamObserver<ListItem>) responseObserver);
                    break;
                default:
                    throw new AssertionError();
            }
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("unchecked")
        public io.grpc.stub.StreamObserver<Req> invoke(
                io.grpc.stub.StreamObserver<Resp> responseObserver) {
            switch (methodId) {
                case METHODID_CREATE_GAME:
                    return (io.grpc.stub.StreamObserver<Req>) serviceImpl.createGame(
                            (io.grpc.stub.StreamObserver<CrResponse>) responseObserver);
                case METHODID_JOIN_GAME:
                    return (io.grpc.stub.StreamObserver<Req>) serviceImpl.joinGame(
                            (io.grpc.stub.StreamObserver<OppResponse>) responseObserver);
                default:
                    throw new AssertionError();
            }
        }
    }

    private static volatile io.grpc.ServiceDescriptor serviceDescriptor;

    public static io.grpc.ServiceDescriptor getServiceDescriptor() {
        io.grpc.ServiceDescriptor result = serviceDescriptor;
        if (result == null) {
            synchronized (GameConfiguratorGrpc.class) {
                result = serviceDescriptor;
                if (result == null) {
                    serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
                            .setSchemaDescriptor(null)
                            .addMethod(getGetListOfGamesMethod())
                            .addMethod(getCreateGameMethod())
                            .addMethod(getJoinGameMethod())
                            .build();
                }
            }
        }
        return result;
    }
}
