// automatically generated by the FlatBuffers compiler, do not modify

package com.example.transport;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

import javax.annotation.Nullable;

@SuppressWarnings("unused")
public final class PlainResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static PlainResponse getRootAsPlainResponse(ByteBuffer _bb) { return getRootAsPlainResponse(_bb, new PlainResponse()); }
  public static PlainResponse getRootAsPlainResponse(ByteBuffer _bb, PlainResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PlainResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte respType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public  @Nullable Table resp(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createPlainResponse(FlatBufferBuilder builder,
      byte resp_type,
      int respOffset) {
    builder.startTable(2);
    PlainResponse.addResp(builder, respOffset);
    PlainResponse.addRespType(builder, resp_type);
    return PlainResponse.endPlainResponse(builder);
  }

  public static void startPlainResponse(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addRespType(FlatBufferBuilder builder, byte respType) { builder.addByte(0, respType, 0); }
  public static void addResp(FlatBufferBuilder builder, int respOffset) { builder.addOffset(1, respOffset, 0); }
  public static int endPlainResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PlainResponse get(int j) { return get(new PlainResponse(), j); }
    public PlainResponse get(PlainResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

